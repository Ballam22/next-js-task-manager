// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(uuid())
  username        String   @unique
  email           String   @unique
  hashed_password String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  projects    Project[]
  tasks       Task[]
  comments    Comment[]
  sessions    Session[]
  roles       Role[]
  userstories UserStory[]
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  users User[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String
  status_id   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user_id     String
  user        User          @relation(fields: [user_id], references: [id])
  tasks       Task[]
  userStories UserStory[]
  status      ProjectStatus @relation(fields: [status_id], references: [id])
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  status_id   String
  priority_id String
  due_date    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  project_id       String
  project          Project      @relation(fields: [project_id], references: [id])
  user_story_id    String
  user_story       UserStory    @relation(fields: [user_story_id], references: [id])
  assigned_user_id String
  assigned_user    User         @relation(fields: [assigned_user_id], references: [id])
  comments         Comment[]
  status           TaskStatus   @relation(fields: [status_id], references: [id])
  priority         TaskPriority @relation(fields: [priority_id], references: [id])
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  created_at DateTime @default(now())

  task_id String
  task    Task   @relation(fields: [task_id], references: [id])
  user_id String
  user    User   @relation(fields: [user_id], references: [id])
}

model UserStory {
  id                  String   @id @default(uuid())
  title               String
  description         String
  acceptance_criteria String
  status              String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  project_id String
  project    Project @relation(fields: [project_id], references: [id])
  user_id    String
  user       User    @relation(fields: [user_id], references: [id])
  tasks      Task[]
}

model Session {
  id               String   @id @default(uuid())
  token            String   @unique
  expiry_timestamp DateTime
  user_id          String
  user             User     @relation(fields: [user_id], references: [id])
}

model TaskStatus {
  id   String @id @default(uuid())
  name String @unique

  tasks Task[]
}

model TaskPriority {
  id   String @id @default(uuid())
  name String @unique

  tasks Task[]
}

model ProjectStatus {
  id   String @id @default(uuid())
  name String @unique

  projects Project[]
}
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
